// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # sdf 纹理
        sdf_texture: { value: grey }
        # sdf 半径
        sdf_radius_f: { value: 10.0 }
        # 描边半径
        stroke_radius_f: { value: 10.0 }
        # 描边颜色
        stroke_color_f: { value: [1, 1, 1, 1] }
        # 外发光半径
        outer_radius_f: { value: 10.0 }
        # 外发光颜色
        outer_color_f: { value: [1, 1, 1, 1] }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
	#include <cc-global>

  #include "mk_dist_field_func"
  #include "mk_dist_field_transform"


  in vec4 color;

  // 传递的 Float
  uniform Float {
    // sdf 半径
    float sdf_radius_f;
    // 描边半径
    float stroke_radius_f;
    // 外发光半径
    float outer_radius_f;
  };

  // 传递的 vec4
  uniform Vec4 {
    // 描边颜色
    vec4 stroke_color_f;
    // 外发光颜色
    vec4 outer_color_f;
  };

  // sdf 纹理
  uniform sampler2D sdf_texture;

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  // 外发光
  vec4 outer_glow(float dist_f_, vec4 color_v4_, vec4 input_color_v4_, float radius_f_) {
    // dist_f_ > radius_f_ 结果为 0
    // dist_f_ < 0 结果为 1
    // dist_f_ > 0 && dist_f_ < radius_f_ 则 dist_f_ 越大 a_f 越小，范围 0 ~ 1
    float a_f = abs(clamp(dist_f_ / radius_f_, 0.0, 1.0) - 1.0);
    // pow：平滑 a_f
    // max and min：防止在物体内部渲染
    float b_f = min(max(0.0, dist_f_), pow(a_f, 5.0));
    return color_v4_ + input_color_v4_ * b_f;
  }
  
  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif

      // 距离场，使用采样得到 sdf 纹理上的 color
      float dist_f = (1.0 - CCSampleWithAlphaSeparated(sdf_texture, uv0).r) * sdf_radius_f;

      // 描边
      o = mix(o, stroke_color_f, abs(clamp(dist_f - stroke_radius_f, 0.0, 1.0) - clamp(dist_f, 0.0, 1.0)));
      
      // 外发光
      o = outer_glow(dist_f, o, outer_color_f, outer_radius_f);

      o *= color;
    #endif
    ALPHA_TEST(o);
    return o;
  }
}%
