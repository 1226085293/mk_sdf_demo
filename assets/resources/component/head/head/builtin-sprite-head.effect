// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        rounded_f: { value: 0.5 }
        smoothstep_f: { value: 0.01 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  // 传递的数据
  // uniform Float {
  //   float rounded_f;
  // }

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
	#include <cc-global>

  #include "mk_dist_field_func"
  #include "mk_dist_field_transform"


  in vec4 color;

  // 传递的属性
  uniform Float {
    float rounded_f;
    float smoothstep_f;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif


    vec4 color2 = color;
    // 以图片中心点为（0,0）点的渲染坐标
    vec2 render_v2 = (uv0 - vec2(0.5)) * 2.0;
    // 距离场
    float dist_f = sdf_rounded(sdf_box(render_v2, vec2(1.0 - rounded_f)), rounded_f);


    // ceil 向上取整，例如在物体外的值 0.1 取整后为 1，物体内的值 -0.1 取整后为 0
    // 所以 物体外就完全是 vec4(0.0) 颜色，物体内就是原本的颜色
    o = mix(o, vec4(0.0), clamp(ceil(dist_f), 0.0, 1.0));

    // 抗锯齿
    color2.a = smoothstep(smoothstep_f, -smoothstep_f, dist_f);

    o *= color2;
    ALPHA_TEST(o);
    return o;
  }
}%
