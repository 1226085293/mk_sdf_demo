// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        # 触摸点
        touch_pos_v4s: { value: [0.0, 0.0, 0.0, 0.0] }
        # 半径
        radius_f: { value: 0.2 }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <cc-global>
  #if USE_LOCAL
    #include <cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  // 传递的数据
  // uniform Float {
  //   float rounded_f;
  // }

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <embedded-alpha>
  #include <alpha-test>
	#include <cc-global>

  #include "mk_dist_field_func"
  #include "mk_dist_field_transform"


  in vec4 color;

  // 最大坐标数量
  #define max_pos_num 128

  // 传递的属性
  uniform Vec4 {
    // 触摸点
    vec4 touch_pos_v4s[max_pos_num];
    // 半径
    float radius_f;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 11) uniform sampler2D cc_spriteTexture;
  #endif

  vec4 frag () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    // float radius_f = 0.2;
    // vec4 touch_pos_v4s[1];
    // touch_pos_v4s[0] = vec4(1.0, 1.0, -999.0, -999.0);

    #if USE_TEXTURE
      vec4 color2 = color;
      // 以图片中心点为（0,0）点, 范围为（-1 ~ 1）的渲染坐标
      vec2 render_v2 = (uv0 - vec2(0.5)) * 2.0;
      
      // 距离场
      float dist_f = sdf_box(render_v2, vec2(1.0, 1.0));
      // 圆形距离场
      float dist2_f = 999.0;
      for (int i = 0; i < max_pos_num; i++) {
        vec2 pos_v2 = touch_pos_v4s[i].xy;
        if (pos_v2.x == -999.0) {
          dist_f = merge_exclude(dist_f, dist2_f);
          break;
        }
        dist2_f = merge(dist2_f, sdf_circle(translate(render_v2, pos_v2), radius_f));
        vec2 pos2_v2 = touch_pos_v4s[i].zw;
        if (pos2_v2.x == -999.0) {
          dist_f = merge_exclude(dist_f, dist2_f);
          break;
        }
        dist2_f = merge(dist2_f, sdf_circle(translate(render_v2, pos_v2), radius_f));
      }


      o = mix(vec4(0.0), o, clamp(ceil(-dist_f), 0.0, 1.0));
    #endif

  
    o *= color;
    ALPHA_TEST(o);
    return o;
  }
}%
